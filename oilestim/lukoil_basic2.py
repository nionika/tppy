#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Oct 21 12:55:51 2018

@author: evgeniyamiller
"""

import numpy as np
from scipy.optimize import linprog

# Решим задачу, когда НПЗ и месторождений больше одного
prod_capacity = [970000, 313000, 308000, 136000] # барр. н. э./сут, мощность добычи
oil_base = [7304000000, 2410000000, 2163000000, 912000000] # млн барр., запасы
q_oil = [46840000, 15814000, 14585000, 6659000] # тонн, объем добычи нефти в 2014
q_oil_exp = 11725000 # тонн, объем экспорта нефти в 2014
q_oil_dom = 29833000 # тонн, объем внутреннего потребления в 2014
q_oil_imp = 1034000 # тонн, объем импорта нефти в 2014

ref_yield = [92.5, 82.9, 64.8, 64.3] # %, глубина переработки нефти
ref_capacity = [11300000, 13100000, 17000000, 4000000] # тонн в год, установленная мощность НПЗ
q_oil_ref = [11413000, 12685000, 17021000, 3993000] # тонн, объем переработки нефти в 2014
q_petr = [10932000, 12430000, 16294000, 3835000] # тонн, объем произведенных нефтепродуктов в 2014
q_petr_exp = 23377000 # тонн, объем экспорта нефтепродуктов в 2014
q_petr_dom = 22337000 # тонн, объем внутреннего потребления нефтепродуктов в 2014
q_petr_imp = 2041000 # тонн, объем импорта нефтепродуктов в 2014

p_oil_exp = 718.79 # $/тонну, цена на нефть марки "Юралс" (СИФ Средиземномрск регион) в 2014
p_petr_exp = 918.87 # $/тонну, высокооктановый бензин (ФОБ Роттердам) в 2014
p_petr_dom = 834.17 # $/тонну, бензин (Аи-95) в 2014

ndpi = 151.67 # $/тонну, НДПИ в 2014
exp_oil_tax = 366.53 # $/тонну, экспортная пошлина на нефть в 2014
exp_petr_tax = 329.83  # $/тонну, экспортная пошлина на нефтепродукты в 2014
excise_petr = 6450 # руб/ тонну, акциз на бензин класса Евро-5 в 2014

r = 38.42 # руб/ $, обменный курс в 2014
b_t = 0.1364 # 1 баррель = 0.1364 тоннны

cost_oil_prod = [2677, 5474, 2750, 8938] # руб/ тонну, удельные издержки на добычу нефти в 2014
cost_oil_ref = 1632 # руб/ тонну, удельные издержки на нефтепереработку в 2014
cost_oil_tran = 696 # руб/ тонну, удельные издержки на транспортировку нефти в 2014
cost_petr_tran = 6332 # руб/ тонну, удельные издержки на транспортировку нефтепродуктов в 2014
alpha = np.matrix([[0.402054292, 0.241746148, 0.35619956, 0],
                   [0, 0, 0, 1],
                   [0, 0.213396562, 0.786603438, 0],
                   [0, 0.966403162, 0.033596838, 0]],
                  dtype=np.float32)

M = len(q_oil) # количество месторождений
N = len(ref_yield) # количество НПЗ

A = np.zeros((M + 2 * M * N, 2 * M + 2 * N), dtype=np.float32) # создадим нулевую матрицу А для ограничений типа неравенство
b = np.zeros((M + 2 * M * N,), dtype=np.float32) # создадим нулевой столбец b для ограничений типа неравенство
p = np.zeros((2 * M + 2 * N,), dtype=np.float32) # создадим нулевой столбец p
Ae = np.zeros((1, 2 * M + 2 * N), dtype=np.float32) # создадим нулевую матрицу Ае для ограничений типа равенство
be = np.zeros((1,), dtype=np.float32) # создадим нулевой столбец be для ограничений типа равенство

# Заполним матрицу A и столбец b
# Ограничение 1: сумма объемов добытой нефти на месторождении m,
# идущая на экспорт и внутреннее потребление не превышает запаса месторождения m
#деленные на мощность добычи месторождения m
#for m in range(M):
#    A[m,m] = 1
#    A[m,M + m] = 1
#    b[m] = prod_capacity[m] * 365 * b_t

for m in range(M):
    A[m,m] = 1
    A[m,M + m] = 1
    b[m] = q_oil[m]

# Ограничение 2: сумма объемов нефти добытой на месторождении m и доставленной на НПЗ n
# не превышает установленную мощность НПЗ n
for n in range (N):
    for m in range(M):
        A[M + n, M + m] = alpha[m, n]
    b[M + n] = ref_capacity[n]


# Ограничение 3: сумма объемов нефти добытой на месторождении m и доставленной на НПЗ n
# больше, чем объем производства на НПЗ n нефтепродуктов (бензина и мазута)      
for n in range (N):
    for m in range(M):
        A[M + M * N + n, m + M] = -alpha[m,n]
    A[M + M * N + n, 2 * M + n ] = 100 / (ref_yield[n])
    A[M + M * N + n, 2 * M + N + n] = 100 / (ref_yield[n])


# Ограничение 4: объемы реализации нефти и нп на экспорт и на внутренний рынок положительные
tmp = np.eye(2 * N + 2 * M) * (-1)
A = np.vstack([A, tmp])
b = np.hstack((b, np.zeros((2 * N + 2 * M))))

# Ограничение 5: сумма объемов экспорта нефти с месторождений не превышает спрос
tmp = np.zeros((1, 2 * M + 2 * N))
for m in range(M):
    tmp[0, m] = 1
A = np.vstack([A, tmp])
b = np.hstack((b, q_oil_exp))

# Ограничение 6: объемы внутреннего сбыта нефти не превышают сумму переработанной нефти на всех НПЗ
tmp = np.zeros((1, 2 * M + 2 * N))
for m in range(M):
    tmp[0, M + m] = 1 # по идее -1
A = np.vstack([A, tmp])
s = np.array(q_oil_ref).sum()
b = np.hstack((b, s)) # по идее -1

# Ограничение 7: сумма объемов внутреннего сбыта нефтепродуктов не превышают спрос
tmp = np.zeros((1, 2 * M + 2 * N))
for n in range(N):
    tmp[0, 2 * M + N + n] = 1
A = np.vstack([A, tmp])
b = np.hstack((b, q_petr_dom))

# Ограничение 8: объемы сбыта нефтепродуктов на экспорт не превышают спрос
tmp = np.zeros((1, 2 * M + 2 * N))
for n in range(N):
    tmp[0, 2 * M + n] = 1
A = np.vstack([A, tmp])
b = np.hstack((b, q_petr_exp))

#  Заполняем столбец p
for m in range(M):
    p[m] = (p_oil_exp - ndpi - exp_oil_tax) * r - cost_oil_prod[m] - cost_oil_tran
for m in range(M):
    p[M + m] = 0
for n in range(N):
    p[2 * M + n ] = (p_petr_exp - exp_petr_tax) * r - cost_oil_ref - cost_petr_tran
for n in range(N):
    p[2 * M + N + n] = p_petr_dom * r - excise_petr - cost_oil_ref - cost_petr_tran
  
    
#res = linprog(-p, A_ub=A, b_ub=b, A_eq=Ae, b_eq=be)
res = linprog(-p, A_ub=A, b_ub=b)
print(res)
